import fs from 'fs-extra';
import path from 'path';
import { glob } from 'glob';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const srcDir = path.resolve(__dirname, '../src');
const apiDir = path.join(srcDir, 'api');
const outputDir = path.join(srcDir, 'lib');
const outputFile = path.join(outputDir, 'api-client.js');

const helpers = `
class ApiError extends Error {
    constructor(message, info, status) {
        super(message);
        this.name = 'ApiError';
        this.info = info;
        this.status = status;
    }
}

function createFetcher(method) {
    return async (params, options = {}) => {
        let url = options.url;
        if (params) {
            for (const key in params) {
                url = url.replace('[:' + key + ']', encodeURIComponent(params[key]));
            }
        }

        const fetchOptions = {
            method,
            headers: { 'Content-Type': 'application/json', ...options.headers },
            ...options.fetchOptions,
        };

        if (options.body) {
            fetchOptions.body = JSON.stringify(options.body);
        }

        const res = await fetch(url, fetchOptions);

        if (!res.ok) {
            let errorInfo;
            try {
                errorInfo = await res.json();
            } catch (e) {
                // Ignore if the response is not JSON
            }
            throw new ApiError('API request failed', errorInfo, res.status);
        }

        if (res.status === 204) {
            return;
        }

        return res.json();
    };
}
`;

export async function generateApiClient() {
    console.log('Generating API client...');

    const apiFiles = await glob('**/*.js', { cwd: apiDir });

    const apiObject = {};
    for (const file of apiFiles) {
        const parts = file.replace(/\.js$/, '').split(/[\\/]/);
        let current = apiObject;
        for (let i = 0; i < parts.length; i++) {
            const part = parts[i];
            const isLast = i === parts.length - 1;
            if (isLast) {
                current[part] = { __isEndpoint: true, file };
            } else {
                current[part] = current[part] || {};
                current = current[part];
            }
        }
    }

    const clientCode = `/**
 * This file is auto-generated by scripts/generate-api-client.js.
 * Do not edit this file directly.
 */
${helpers}
export const api = ${generateClientCode(apiObject)};`;

    await fs.ensureDir(outputDir);
    await fs.writeFile(outputFile, clientCode);

    console.log(`âœ“ API client generated at ${path.relative(process.cwd(), outputFile)}`);
}

function generateClientCode(apiObject) {
    let code = '{\n';
    for (const key in apiObject) {
        const value = apiObject[key];
        const cleanKey = key.startsWith('[') && key.endsWith(']') ? `"${key.slice(1, -1)}"` : key;
        code += `    ${cleanKey}: `;
        if (value.__isEndpoint) {
                        const url = `/api/${value.file.replace(/\\/g, '/').replace(/\.js$/, '').replace(/\/index$/, '')}`;
            code += `{
        get: createFetcher('GET')({ url: '${url}' }),
        post: createFetcher('POST')({ url: '${url}' }),
        put: createFetcher('PUT')({ url: '${url}' }),
        delete: createFetcher('DELETE')({ url: '${url}' }),
    },\n`;
        } else {
            code += `${generateClientCode(value)},\n`;
        }
    }
    code += '}';
    return code;
}

if (process.argv[1] === fileURLToPath(import.meta.url)) {
    generateApiClient().catch(err => {
        console.error('Failed to generate API client:', err);
        process.exit(1);
    });
}
