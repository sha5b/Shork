(()=>{var m=Object.defineProperty;var l=(o,t)=>{for(var e in t)m(o,e,{get:t[e],enumerable:!0})};var c={};l(c,{count:()=>b});function f(o){let t=o,e=new Set;function r(n){t=n,e.forEach(u=>u(t))}function s(n){return e.add(n),n(t),()=>{e.delete(n)}}function i(n){r(n(t))}return{subscribe:s,set:r,update:i}}var b=f(0);function d(){document.querySelectorAll("[data-shork-id]").forEach(o=>{if(!(o instanceof HTMLElement))return;let t=o.dataset.shorkId;if(!t)return;[o,...Array.from(o.querySelectorAll("*"))].forEach(r=>{if(r instanceof HTMLElement){for(let s of r.attributes)if(s.name.startsWith("on:")){let i=s.name.slice(3),n=s.value;r.addEventListener(i,u=>{let a=window.Shork?._componentFunctions?.[t];a&&typeof a[n]=="function"?a[n](u):console.warn(`Function ${n} not found on component ${t}`)})}}})})}function E(o){o.querySelectorAll("[data-subscribe]").forEach(e=>{if(e instanceof HTMLElement){let r=e.dataset.subscribe;r&&r in c&&c[r].subscribe(i=>{e.textContent=String(i)})}}),d()}document.addEventListener("DOMContentLoaded",()=>{E(document.body)});})();
//# sourceMappingURL=data:application/json;base64,
