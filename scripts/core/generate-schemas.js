import { glob } from 'glob';
import fs from 'fs-extra';
import path from 'path';

const routesDir = path.join(process.cwd(), 'src', 'routes');

/**
 * Scans for +page.js files with Zod schemas and generates corresponding type definition files.
 */
export async function generateSchemaTypes() {
  const pageJsFiles = await glob('**/+page.js', { cwd: routesDir });

  for (const pageJsFile of pageJsFiles) {
    const filePath = path.join(routesDir, pageJsFile);
    const fileContent = await fs.readFile(filePath, 'utf-8');

    // Use a simple regex to check if a Zod schema is exported.
    // This is a lightweight approach that avoids a full AST parse.
    if (/export\s+const\s+schema\s*=\s*z\./.test(fileContent)) {
      const dir = path.dirname(filePath);
      const typeFilePath = path.join(dir, '+page.d.ts');

      const typeContent = `// This file is auto-generated by Shork. Do not edit.\nimport type { z } from 'zod';\nimport type { schema } from './+page.js';\n\n/**\n * The inferred type of the data object from your Zod schema.\n * This is used for type-safety and autocompletion in your editor.\n */\nexport type PageData = z.infer<typeof schema>;\n`;

      // Only write the file if the content has changed to avoid unnecessary file modifications.
      if (!fs.existsSync(typeFilePath) || (await fs.readFile(typeFilePath, 'utf-8')) !== typeContent) {
        await fs.writeFile(typeFilePath, typeContent);
        console.log(`\x1b[32m[types]\x1b[0m Generated types for ${pageJsFile}`);
      }
    }
  }
}

// Allow running this script directly for testing or manual generation.
const isDirectRun = import.meta.url.startsWith('file://') && process.argv[1] === new URL(import.meta.url).pathname;
if (isDirectRun) {
    console.log('Generating schema types...');
    generateSchemaTypes().catch(err => {
        console.error('Error generating schema types:', err);
        process.exit(1);
    });
}
